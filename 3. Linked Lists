Linked list is built of objects that are often called cells. These cells contains whatever data the list must store plus a link to another cell. 
The link is simply a refrence or pointer to another object of a cell's class. Often the pointer field in the cell class is called Next. 

------------
Singly Linked Lists 

each cell is connected to the following cell by a single link. 

To use a linked list, you need a set of algorithims for:
- iterating over a list 
- finding items in the list 
- removing items 
- adding items 

What is a sentinel? 

A sentinel is a cell that is part of the linked list but that doesn't contain any meaningfull data. It is only used as a placeholder so that algorithims can refer to a cell that comes before the first cell. 
-------------
Adding cells to the beggining 

place a new_cell at the beggining right after the sentinel.

set the new_cell's Next pointer so that it points to the first cell in the list after the sentinel. 
then set the sentinel's Next pointer to the new_cell 

O(1)
-------------
Adding cell at the end

travese entire linked_list untill Top points to nil (aka end of list)
make the last cell's link point to the new_cell and then sets the new_cells link to point to null 

O(N)
--------------
Inserting cells after other cells 

assume you have varible named after_me that points to the cell after which you want to insert the item. 

make new cell's link point to the cell that follows after_me and then makes after_me's link point to the new_cell. 
O(1) to mkae the actual change but O(N) to find the variable after_me 

--------------- 
Deleting cells 

simply set the previous cell's link to the cell that follows the target cell, so that you 'skip' over the cell that you want to delete. 

depeneding on the language you may need to explicitly free up memory for the cells you've deleted. 
---------------
Doubly linked lists 

In doubly linked lists cells have links that point to both the next and previous cells in the list. 
The link in the previous cell is often called Prev or Previous. 

Often its convenient to have both top and bottom sentinels for doubly linked lists so the program can manipulate either side. 

Althougb similar to singly linked lists we need to be extra careful about relabeling the previous links as well. 
                   [new_cell]
[]  []  [after_me] 'insert here' [] [] 
// update Next links
new_cell.Next = after_me.Next 
after_me.Next = new_cell 

// update previous links
new_cell.Next.Prev = new_cell
new_cell.Prev = after_me

---------------
Sorted Linked Lists && Linked list algorithims

Copying Lists

InsertionSort O(N^2) works for small lists but not large ones, also works for singlyLinked Lists 
SelectionSort O(N^2)
---------------
Multithreaded Linked Lists 

You can have links that point to other cells based on differnt paramters as opposed to just order, for example if you ahve a linked list of planets 
you can have links for order, mass,  distance etc. Now our linked lists has mutliple types of links, each wither thier own order. 

----------------
Linked lists with loops 

a circuluar linked list is a linked list in which the last link points back to the first item in the list. 

you can have a linked list with a loop in whcih the loop doestn include all the cells, think of a game loop 

how to tell if a list has a  loop ? 

Marking Cells 
traverse the list and amrking each as you visit, if you come to a cell that is already marked, you know that the list as a loop. 

Algorithim must traverse the loop twice - once to mark the cells as ' Visited ' and a second time to reset them to false. O(2N) -> O(N) 
----------------
What if we cant alter the data we are traversing? 

Hash Table! 
Hash table can very quickly store items, retrieve items, and tell you if the item is present in the hash table. 

Hash table should have 1.5XN space for N values. 

Hash Table will detect loops without altering them but requires extra storage. 
how can we do this wihtout requiring extra storage? 
---------------
List Retracting 

this algorithim makes an object traverse the list, for each cell visited, the algorithim makes a second object traverse the list untill it finds the first object. 
If the cells before the two objects are differnt, then the list contains a loop. O(N^2)

This is slower but requires no additional space

Is there a way to do this without needing extra space and or complexity? Yes! 

---------------
List Reversal 
An algorithim can detect a loop by reversing the links in a linked list

This algorithim calls the ReverseList Method to reverse the list and get the reversed lists first cell.  It then calls ReverseList again to re-reverse the list and restore the links to their original values
If the sentinel is the same as the first cell in the reversed list, the algorithim returns true. If the sentinel is different from the first cell in the reverse list then the algorithim returns false.

Teh algorithim traverses the list twice so it performs 2* O(N) which is siplified to O(N) as N -> infinity.
-------------- 
Tortoise and Hare / Floyd's cycle-finding algorithim 

-Start the tortoise moving through the list at one cell per step, start the hare at the begginging but moving two cells per step.
- If the hare finds a null value that means no loop, exit algorithim. 
- Otherwise, when the hare catches the tortoise, restart the hare at the beggining of the list , moving one cell per step and continue moving the ahre one cell per step
- When the tortoise and hare meet again, they are at the start of the loop. Leave the hare there and allow the tortoise to to take one lap around the loop. 
When the tortoise's Next pointer points at the hare, this is the end of the loop.

--------------
Summary && Exercises 

Write an algorithim to find the largest item in a 'singly linked list' 
-> set first value equal to a variable 'best' 
-> Traverse array and check to see if an new_values are > 'best' if so redefine 'best' else continue untill end. 
pseduocode: 

if(top.Next == null) Return null //check if empty

//move to first cell that has data
top = top.Next 

//Save this cell and its value
best_cell = top 
best_value = best_cell.value

//move to next cell 
top = top.Next 

//check other cells 
While(top != null)
  //check to see if value is larger
  if(top.Value > best_value)
    best_cell = top 
    best_value = top.value 
  End if 

  //move to next cell 
  top = top.Next 
End While 
return best_value
end 














